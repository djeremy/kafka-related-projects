import com.github.davidmc24.gradle.plugin.avro.GenerateAvroSchemaTask

buildscript {
    ext {
        kotlinVersion = '1.4.30'
        springBootVersion = '2.3.1.RELEASE'
    }
}

plugins {
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.1.1"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.2.1"
}

apply from: 'test-unit.gradle'
apply from: 'test-service.gradle'

// #########################################################
// Dependencies
// #########################################################

ext {
    springKafkaVersion = '2.5.2.RELEASE'
    kafkaClientVersion = '2.5.0'
    springCloudVersion = "Hoxton.SR5"
    springCloudSleuthVersion = '2.2.3.RELEASE'
    awaitilityVersion = '4.0.2'
    confluentVesrion = "5.3.1"
    jacksonVersion = "2.11.4"
    spekVersion = '2.0.10'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://packages.confluent.io/maven/" }
}

configurations.all {
    exclude group: 'org.slf4j', module: "slf4j-log4j12"
}

dependencies {
    // Spring
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

    implementation "net.javacrumbs.shedlock:shedlock-spring:4.14.0"
    implementation 'net.javacrumbs.shedlock:shedlock-provider-mongo:4.14.0'

    implementation "org.springframework.boot:spring-boot-starter-validation"

    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation("org.springframework.kafka:spring-kafka:$springKafkaVersion")
    implementation("org.apache.kafka:kafka-clients:$kafkaClientVersion")
    implementation("org.apache.kafka:kafka-streams:$kafkaClientVersion")

    // Avro
    implementation "org.apache.avro:avro:1.9.2"
    implementation "io.confluent:kafka-avro-serializer:5.3.1"
    implementation 'io.confluent:kafka-streams-avro-serde:6.1.1'
    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

    // Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:6.1'
    implementation 'io.github.microutils:kotlin-logging:1.7.6'
    implementation "org.codehaus.janino:janino"

    // Others
    implementation 'org.yaml:snakeyaml:1.26'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    // Prometheus
    implementation "io.micrometer:micrometer-core:latest.release"
    implementation "io.micrometer:micrometer-registry-prometheus:latest.release"

    // Tests
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0"
    testImplementation "com.github.javafaker:javafaker:0.15"
    testImplementation "org.awaitility:awaitility-kotlin:$awaitilityVersion"
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"

    //logging
    testImplementation 'io.github.microutils:kotlin-logging:2.0.3'

    //avro
    testImplementation "org.apache.avro:avro:1.9.2"

    //spring test
    testImplementation 'org.springframework.boot:spring-boot-test:2.3.10.RELEASE'

    //spring kafka
    testImplementation 'org.springframework.kafka:spring-kafka:2.5.12.RELEASE'
    testImplementation 'org.springframework.kafka:spring-kafka-test:2.5.12.RELEASE'
}

def avroSrcFolderName = "src/main/avro"
def avscFolderName = "generated-main-avro-avsc"
def avprFolderName = "generated-main-avro-avpr"

task generateAvroSchema(type: GenerateAvroSchemaTask) {
    dependsOn generateAvroProtocol
    source file(avroSrcFolderName)
    source file("${buildDir}/$avprFolderName")
    include("**/*.avpr")
    outputDir = file("${buildDir}/$avscFolderName")
}


// #########################################################
// Other
// #########################################################

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict -Xuse-experimental"]
        jvmTarget = "11"
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}